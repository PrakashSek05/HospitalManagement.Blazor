@page "/billings"
@using Microsoft.AspNetCore.Components.Forms
@using HospitalManagement.Blazor.DTO
@inject HospitalManagement.Blazor.Services.BillingsApiClient Api
@inject HospitalManagement.Blazor.Services.CommonApiClient Common

<h3>Billings</h3>

<!-- FILTERS -->
<div class="mb-3">
    <div class="row g-2">
        <div class="col-12 col-md-3">
            <label class="form-label">Patient</label>
            <InputSelect class="form-select" @bind-Value="filterPatientId" TValue="int?">
                <option value="">All</option>
                @foreach (var p in patientOptions)
                {
                    <option value="@p.Id">@p.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col-12 col-md-2">
            <label class="form-label">On Date</label>
            <InputDate @bind-Value="filterDate" class="form-control" />
        </div>
        <div class="col-12 col-md-2">
            <label class="form-label">From</label>
            <InputDate @bind-Value="filterFrom" class="form-control" />
        </div>
        <div class="col-12 col-md-2">
            <label class="form-label">To</label>
            <InputDate @bind-Value="filterTo" class="form-control" />
        </div>
        <div class="col-12 col-md-2">
            <label class="form-label">Paid</label>
            <select class="form-select" @bind="filterPaid">
                <option value="">All</option>
                <option value="true">Paid</option>
                <option value="false">Unpaid</option>
            </select>
        </div>
        <div class="col-12 col-md-1 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="Load">Search</button>
        </div>
    </div>
</div>

<div class="mb-2">
    <button class="btn btn-success" @onclick="NewBilling">Add Billing</button>
</div>

<!-- LIST -->
@if (loading)
{
    <p>Loading...</p>
}
else if (items?.Count is > 0)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Billing Id</th>
                <th>Date (UTC)</th>
                <th>Patient</th>
                <th>Appointment Date</th>
                <th>Total</th>
                <th>Discount</th>
                <th>Tax</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in items)
            {
                <tr>
                    <td>@b.BillingId</td>
                    <td>@b.BillingDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@b.PatientName</td>
                    <td>@b.AppointmentDate?.ToString("yyyy-MM-dd")</td>
                    <td>@b.TotalAmount</td>
                    <td>@b.Discount</td>
                    <td>@b.Tax</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ShowDetails(b.BillingId)">Details</button>
                        <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => Edit(b.BillingId)">Edit</button>                        
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No records.</p>
}

<!-- DETAILS -->
@if (selected is not null)
{
    <div class="card my-3">
        <div class="card-header">Billing #@selected.BillingId</div>
        <div class="card-body">
            <div class="row g-2">
                <div class="col-12 col-md-3"><strong>Date (UTC):</strong> @selected.BillingDate</div>
                <div class="col-12 col-md-3"><strong>Patient:</strong> @selected.PatientName</div>
                <div class="col-12 col-md-3"><strong>Appointment Date:</strong> @selected.AppointmentDate?.ToString("yyyy-MM-dd")</div>
                <div class="col-12 col-md-2"><strong>Total:</strong> @selected.TotalAmount</div>
                <div class="col-12 col-md-2"><strong>Discount:</strong> @selected.Discount</div>
                <div class="col-12 col-md-2"><strong>Tax:</strong> @selected.Tax</div>
                <div class="col-12 col-md-2"><strong>Net:</strong> @selected.NetAmount</div>
                <div class="col-12 col-md-2"><strong>Paid:</strong> @(selected.Paid ? "Yes" : "No")</div>
            </div>
        </div>
    </div>
}

<!-- CREATE / EDIT -->
@if (editing)
{
    <div class="card my-3">
        <div class="card-header">
            @(editModel.BillId == 0 ? "Add Billing" : $"Edit Billing #{editModel.BillId}")
        </div>
        <div class="card-body">
            <EditForm Model="editModel" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Patient</label>
                        <InputSelect class="form-select" @bind-Value="editModel.PatientId" TValue="int">
                            <option value="0">Select</option>
                            @foreach (var p in patientOptions)
                            {
                                <option value="@p.Id">@p.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">Total Amount</label>
                        <InputNumber class="form-control" @bind-Value="editModel.TotalAmount" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Discount</label>
                        <InputNumber class="form-control" @bind-Value="editModel.Discount" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Tax</label>
                        <InputNumber class="form-control" @bind-Value="editModel.Tax" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Net Amount</label>
                        <InputNumber class="form-control" @bind-Value="editModel.NetAmount" />
                    </div>
                    <div class="col-md-3 d-flex align-items-center">
                        <label class="form-label me-2 mb-0">Paid</label>
                        <InputCheckbox class="form-check-input" @bind-Value="editModel.PaidFlag" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Created (UTC)</label>
                        <InputDate class="form-control" @bind-Value="editModel.CreatedUtc" />
                    </div>
                </div>

                <div class="mt-3">
                    <button class="btn btn-primary me-2" type="submit">Save</button>
                    <button class="btn btn-secondary" type="button" @onclick="CancelEdit">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<BillingMiniDto>? items;                 // <-- align to API list DTO
    private List<LookupItemDto> patientOptions = new();  // <-- single definition
    private bool loading;

    private BillingDto? selected;                        // <-- align to API details DTO

    private int? filterPatientId;
    private string? filterPaid;
    private DateTime? filterDate;
    private DateTime? filterFrom;
    private DateTime? filterTo;

    private bool editing;
    private BillingEditDto editModel = new();

    protected override async Task OnInitializedAsync()
    {
        patientOptions = await Common.GetPatientsAsync() ?? new();
        await Load();
    }

    private async Task Load()
    {
        loading = true;

        bool anyFilter =
            filterPatientId.HasValue || filterDate.HasValue ||
            filterFrom.HasValue || filterTo.HasValue ||
            !string.IsNullOrWhiteSpace(filterPaid);

        if (anyFilter)
        {
            bool? paid = filterPaid switch
            {
                "true" => true,
                "false" => false,
                _ => (bool?)null
            };

            items = await Api.FilterAsync(filterPatientId, filterDate, filterFrom, filterTo, paid) ?? new();
        }
        else
        {
            items = await Api.GetAllAsync() ?? new();
        }

        selected = null;
        loading = false;
        StateHasChanged();
    }

    private async Task ShowDetails(int id) => selected = await Api.GetAsync(id);

    private void NewBilling()
    {
        editing = true;
        editModel = new BillingEditDto
        {
            CreatedUtc = DateTime.UtcNow,
            PatientId = 0
        };
        selected = null;
    }

    private async Task Edit(int id)
    {
        var dto = await Api.GetAsync(id);
        if (dto is null) return;

        editing = true;
        editModel = new BillingEditDto
        {
            BillId = dto.BillingId,
            PatientId = dto.PatientId,
            AppointmentId = dto.AppointmentId, // hidden; preserved
            TotalAmount = dto.TotalAmount,
            Discount = dto.Discount,
            Tax = dto.Tax,
            NetAmount = dto.NetAmount,
            PaidFlag = dto.Paid,
            CreatedUtc = dto.BillingDate
        };
        selected = null;
    }

    private async Task Save()
    {
        if (editModel.PatientId <= 0) return; // simple guard

        if (editModel.BillId == 0)
        {
            var newId = await Api.CreateAsync(editModel);
            editing = false;
            await Load();
            await ShowDetails(newId);
        }
        else
        {
            await Api.UpdateAsync(editModel.BillId, editModel);
            editing = false;
            await Load();
            await ShowDetails(editModel.BillId);
        }
    }

    private void CancelEdit()
    {
        editing = false;
        editModel = new();
    }    
}