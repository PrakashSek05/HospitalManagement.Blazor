@typeparam TItem

<div class="d-flex flex-wrap gap-2 mb-3 align-items-center">
    <input class="form-control w-50"
           placeholder="@SearchPlaceholder"
           value="@_search"
           @oninput="@(e => { _search = e.Value?.ToString() ?? string.Empty; ApplyFilter(resetPage: true); })" />

    <div class="ms-auto d-flex align-items-center gap-2">
        <label class="form-label mb-0">Page size</label>
        <select class="form-select" style="width:90px" @onchange="OnPageSizeChanged">
            @foreach (var s in PageSizeOptions)
            {
                <option value="@s" selected="@(PageSize == s)">@s</option>
            }
        </select>
    </div>
</div>
@if (Loading)
{
    <div class="alert alert-info">Loading...</div>
}
else if (PagedItems.Count == 0)
{
    <div class="alert alert-warning mb-0">No records found.</div>
}
else
{
    <table class="table table-striped table-hover align-middle">
        <thead>
            @HeaderTemplate
        </thead>
        <tbody>
            @foreach (var item in PagedItems)
            {
                @RowTemplate(item)
            }
        </tbody>
    </table>

    <!-- Pager -->
    <nav>
        <ul class="pagination">
            <li class="page-item @(IsFirstPage ? "disabled" : "")">
                <button class="page-link" @onclick="FirstPage">« First</button>
            </li>
            <li class="page-item @(IsFirstPage ? "disabled" : "")">
                <button class="page-link" @onclick="PrevPage">‹ Prev</button>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Page @Page of @TotalPages (@TotalCount total)</span>
            </li>
            <li class="page-item @(IsLastPage ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">Next ›</button>
            </li>
            <li class="page-item @(IsLastPage ? "disabled" : "")">
                <button class="page-link" @onclick="LastPage">Last »</button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public RenderFragment HeaderTemplate { get; set; } = default!;
    [Parameter] public RenderFragment<TItem> RowTemplate { get; set; } = default!;
    [Parameter] public Func<TItem, string, bool>? SearchPredicate { get; set; }
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public bool Loading { get; set; }

    private List<TItem> Filtered = new();
    private List<TItem> PagedItems = new();
    private string _search = string.Empty;

    public int Page { get; set; } = 1;
    public int PageSize { get; set; } = 10;
    public int[] PageSizeOptions { get; set; } = new[] { 5, 10, 20, 50 };
    public int TotalPages { get; set; } = 1;
    public int TotalCount { get; set; } = 0;

    private bool IsFirstPage => Page <= 1;
    private bool IsLastPage => Page >= TotalPages;

    protected override void OnParametersSet()
    {
        ApplyFilter(true);
    }

    private void ApplyFilter(bool resetPage = false)
    {
        if (resetPage) Page = 1;

        if (string.IsNullOrWhiteSpace(_search) || SearchPredicate == null)
            Filtered = Items;
        else
            Filtered = Items.Where(x => SearchPredicate(x, _search.Trim().ToLower())).ToList();

        TotalCount = Filtered.Count;
        TotalPages = Math.Max(1, (int)Math.Ceiling(TotalCount / (double)PageSize));

        if (Page > TotalPages) Page = TotalPages;

        ApplyPaging();
    }

    private void ApplyPaging()
    {
        var skip = (Page - 1) * PageSize;
        PagedItems = Filtered.Skip(skip).Take(PageSize).ToList();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var size) && size > 0)
        {
            PageSize = size;
            ApplyFilter(true);
        }
    }

    private void FirstPage() { if (!IsFirstPage) { Page = 1; ApplyPaging(); } }
    private void PrevPage() { if (!IsFirstPage) { Page--; ApplyPaging(); } }
    private void NextPage() { if (!IsLastPage) { Page++; ApplyPaging(); } }
    private void LastPage() { if (!IsLastPage) { Page = TotalPages; ApplyPaging(); } }
}
